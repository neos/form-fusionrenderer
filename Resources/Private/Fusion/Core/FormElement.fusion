prototype(Neos.Form.FusionRenderer:FormElement) < prototype(Neos.Fusion:Join) {
    @context.elementName = ${'--' + formRuntime.identifier + '[' + element.identifier + ']'}
    @context.elementValue = ${Neos.Form.FusionRenderer.elementValue(formRuntime, element)}
    @context.elementValidationErrors = ${Neos.Form.FusionRenderer.validationErrors(formRuntime, element)}
    @context.elementHasValidationErrors = ${Neos.Form.FusionRenderer.hasValidationErrors(formRuntime, element)}

    label = Neos.Form.FusionRenderer:FormElementLabel
    fieldContainer = Neos.Form.FusionRenderer:FormElementFieldContainer

    @process.wrap = Neos.Fusion:Tag {
        tagName = 'div'
        attributes.class = ${hasValidationErrors ? 'clearfix error' : 'clearfix'}
        content = ${value}
    }

    @process.renderCallbacks = Neos.Form.FusionRenderer:RenderCallbacks {
        @position = 'end'
        formRuntime = ${formRuntime}
        formElement = ${element}
    }

}

prototype(Neos.Form.FusionRenderer:FormElementLabel) < prototype(Neos.Fusion:Tag) {
    tagName = 'label'
    attributes {
        for = ${element.uniqueIdentifier}
    }
    content = Neos.Fusion:Join {
        value = ${Neos.Form.FusionRenderer.translateAndEscapeProperty(element, 'label')}
        requiredFlag = Neos.Form.FusionRenderer:RequiredFlag
        requiredFlag.@if.isRequired = ${element.required}
    }
}

prototype(Neos.Form.FusionRenderer:RequiredFlag) < prototype(Neos.Fusion:Tag) {
    tagName = 'span'
    attributes.class = 'required'
    content = '*'
}

prototype(Neos.Form.FusionRenderer:FormElementFieldContainer) < prototype(Neos.Fusion:Join) {
    field = Neos.Form.FusionRenderer:FormElementField
    validationErrors = Neos.Form.FusionRenderer:FormElementValidationErrors
    elementDescription = Neos.Form.FusionRenderer:FormElementDescription

    @process.wrap = Neos.Fusion:Tag {
        tagName = 'div'
        attributes.class = ${element.properties.containerClassAttribute}
        content = ${value}
    }
}

prototype(Neos.Form.FusionRenderer:FormElementField) < prototype(Neos.Fusion:Tag) {
    attributes {
        placeholder = ${element.properties.placeholder}
        class = Neos.Fusion:Join {
            defaultClass = ${element.properties.elementClassAttribute ? element.properties.elementClassAttribute : null}
            errorClass = ${element.properties.elementErrorClassAttribute ? element.properties.elementErrorClassAttribute : 'error'}
            errorClass.@process.whitespace = ${' ' + value}
            errorClass.@if.hasValidationErrors = ${elementHasValidationErrors}
        }
        id = ${element.uniqueIdentifier}
    }
}

prototype(Neos.Form.FusionRenderer:FormElementValidationErrors) < prototype(Neos.Fusion:Tag) {
    tagName = 'span'
    attributes {
        class = 'help-inline'
    }
    content = Neos.Fusion:Loop {
        items = ${elementValidationErrors}
        itemName = 'error'
        itemRenderer = ${Translation.translate(error.code, null, error.arguments, 'ValidationErrors', element.renderingOptions.validationErrorTranslationPackage)}
    }
    @if.hasValidationErrors = ${elementHasValidationErrors}
}

prototype(Neos.Form.FusionRenderer:FormElementDescription) < prototype(Neos.Fusion:Tag) {
    tagName = 'span'
    attributes {
        class = 'help-block'
    }
    content = ${element.properties.elementDescription}
    @if.condition = ${element.properties.elementDescription ? true : false}
}
